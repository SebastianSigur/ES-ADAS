{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo enhance the effectiveness of the previous multi-agent debate architecture, I propose a more focused critique mechanism that emphasizes the relevance of feedback. This architecture will utilize a single agent to provide the initial answer and another agent for a refined answer based on critiques, rather than allowing all agents to critique independently. This should make the protocol more efficient and reduce unnecessary redundancy.\n\n**Overall Idea:**\nThe design consists of two main phases: first, a single specialized agent will provide the initial answer; second, a feedback-focused agent will refine that answer based on structured critiques from a single reviewer agent, streamlining the critique process and ensuring that feedback directly informs improvements to the answer.\n\n**Implementation:**\n1. Define instructions for the initial answer agent and the feedback agent.\n2. After the initial response is generated, utilize a focused critique from a single agent to improve the answer.\n3. Ensure the architecture remains within the allowed number of API calls while maximizing the effectiveness of the critique phase.",
        "name": "Focused Argument Refinement",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Initial reasoning\n    initial_instruction = \"Provide an analysis of the mathematical principles involved and give a solution.\"\n    initial_agent = LLMAgentBase(['thinking', 'answer'], 'Initial Reasoning Agent')\n    initial_thinking, initial_answer = initial_agent([taskInfo], initial_instruction)  # 1 call\n    \n    # Phase 2: Feedback and refinement\n    feedback_instruction = f\"Review the provided answer: {initial_answer.content} and suggest improvements.\"\n    feedback_agent = LLMAgentBase(['thinking', 'answer'], 'Feedback and Refinement Agent')\n    feedback_thinking, refined_answer = feedback_agent([taskInfo, initial_answer], feedback_instruction)  # 1 call\n    \n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (24.2%, 40.6%), Median: 32.0%",
        "generation": 10,
        "api_calls": 2,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 15.6%), Median: 10.2%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nGiven the need for more innovative approaches, I propose a design that utilizes multiple agents to dissect the problem into various mathematical principles while allowing for independent reasoning. By employing a more dynamic approach, I can facilitate a richer dialogue between agents, enhancing the final solution.\n\n**Overall Idea:**\nThe architecture will consist of multiple specialized agents, each tasked with analyzing different aspects of the problem. After their individual analyses, a final agent will synthesize these insights into a comprehensive solution. This design promotes rigorous analysis and collective reasoning, maximizing the potential for accurate solutions.\n\n**Implementation:**\n1. Define distinct roles for multiple agents, each focusing on a specific mathematical principle.\n2. Collect and aggregate insights from these agents.\n3. Synthesize the final answer using a dedicated agent, ensuring multiple API calls are employed throughout.",
        "name": "Collaborative Principle Analysis",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Multiple agents analyze different mathematical principles\n    principles_instruction = \"Identify and analyze key mathematical principles related to the problem.\"\n    agents = [LLMAgentBase(['thinking', 'principle_analysis'], 'Principle Analysis Agent') for _ in range(3)]  # 0 calls (instantiation)\n    analyses = []\n    for agent in agents:\n        thinking, analysis = agent([taskInfo], principles_instruction)  # 3 calls (1 per agent)\n        analyses.append(analysis.content)  # Collect the content from each analysis\n\n    # Phase 2: Synthesize insights into a final solution\n    combined_analysis = ' '.join(analyses)  # Combine analyses into a single string\n    aggregation_instruction = f\"Combine the analyses: {combined_analysis} to create a coherent solution.\"\n    final_answer_agent = LLMAgentBase(['thinking', 'final_answer'], 'Final Solution Synthesizer')\n    final_thinking, final_answer = final_answer_agent([taskInfo, combined_analysis], aggregation_instruction)  # 1 call\n\n    return final_answer  # Return the final synthesized answer",
        "fitness": "95% Bootstrap Confidence Interval: (41.4%, 58.6%), Median: 50.0%",
        "generation": 12,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (45.3%, 62.5%), Median: 53.9%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (21.1%, 36.7%), Median: 28.9%"
    },
    "Abstraction to Principles Reasoning,1": null
}