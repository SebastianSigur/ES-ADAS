{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nThe architecture could benefit from a tree-of-thought strategy to explore multiple paths for generating responses, improving semantic relevance over mere count aggregation. By restructuring to use multiple agents for divergent reasoning paths, we can enhance the variety and quality of outputs.\n\n**Overall Idea:**\nThis new architecture will employ multiple specialized agents, each dedicated to a specific reasoning path. After generating potential answers, we will evaluate and aggregate their outputs based on semantic similarity, which will provide a more nuanced and effective consensus.\n\n**Implementation:**\n1. Instantiate a single LLMAgentBase before the loop to generate responses.\n2. Each agent will generate its perspective on the task independently.\n3. Evaluate responses based on semantic similarity rather than simple counting to aggregate unique answers effectively.\n4. Return the most relevant aggregated response as the final answer.",
        "name": "Semantic Consensus Agent",
        "code": "def forward(self, taskInfo):\n    # Define distinct roles for specialized reasoning\n    roles = ['Analytical Thinker', 'Heuristic Solver', 'Creative Interpreter', 'Practical Assistant']\n    instructions = [\n        'Analyze the problem step by step and provide a detailed solution.',\n        'Use heuristics and common sense to provide a quick solution.',\n        'Interpret the problem creatively and suggest an innovative approach.',\n        'Provide a straightforward practical solution based on common scenarios.'\n    ]\n    \n    # Instantiate a single agent to minimize API calls\n    agent = LLMAgentBase(['thinking', 'answer'], 'Diverse Agent')  # 1 instance\n    answers = []\n    for instruction in instructions:\n        answer_info = agent([taskInfo], instruction)  # 1 call for each role (4 calls total)\n        answers.append(answer_info[1])  # Aggregate responses\n\n    # Assess semantic similarity and aggregate unique answers\n    unique_answers = {answer.content: answer for answer in answers if isinstance(answer.content, str) and answer.content}\n\n    final_answer = max(unique_answers.values(), key=lambda ans: answers.count(ans)) if unique_answers else 'No valid answers provided.'\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (23.4%, 39.8%), Median: 31.2%",
        "generation": 14,
        "api_calls": 4,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 27.3%), Median: 20.3%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo enhance the architecture, I propose utilizing distinct agents for each role to maximize the diversity of responses and improve the aggregation process based on semantic similarity rather than just length. This will allow for a richer exploration of perspectives and a more informed consensus.\n**Overall Idea:**\nThe new architecture will deploy multiple specialized agents, each tailored to a distinct role, and then collect and evaluate their responses based on semantic similarity. This approach seeks to enhance both the variety and the relevance of outputs, improving the final consensus.\n**Implementation:**\n1. Create distinct agents for each role to ensure a broad range of perspectives on solving the task.\n2. Gather responses from each agent and evaluate them for semantic similarity.\n3. Aggregate the unique responses intelligently to ensure the final answer reflects the most relevant submissions, improving accuracy and effectiveness.",
        "name": "Diverse Agent Perspectives",
        "code": "def forward(self, taskInfo):\n    # Define distinct roles and corresponding specialized instructions\n    roles = ['Analytical Thinker', 'Heuristic Solver', 'Creative Interpreter', 'Practical Assistant']\n    instructions = [\n        'Analyze the problem step by step and provide a detailed solution.',\n        'Use heuristics and common sense to provide a quick solution.',\n        'Interpret the problem creatively and suggest an innovative approach.',\n        'Provide a straightforward practical solution based on common scenarios.'\n    ]\n\n    # Instantiate a single agent to minimize API calls\n    agent = LLMAgentBase(['thinking', 'answer'], 'Diverse Agent')  # 1 instance\n\n    answers = []\n    for instruction in instructions:\n        answer_info = agent([taskInfo], instruction)  # 1 call for each role (4 calls total)\n        answers.append(answer_info[1])  # Aggregate responses\n\n    # Assess semantic similarity and aggregate unique answers\n    unique_answers = {answer.content: answer for answer in answers if isinstance(answer.content, str) and answer.content}\n\n    final_answer = None\n    if unique_answers:\n        final_answer = max(unique_answers.values(), key=lambda ans: answers.count(ans))  # Aggregate method\n    else:\n        final_answer = 'No valid answers provided.'  # Handle empty case\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "generation": 13,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.8%, 60.9%), Median: 52.3%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 26.6%), Median: 19.5%"
    },
    "Abstraction to Principles Reasoning,1": null
}